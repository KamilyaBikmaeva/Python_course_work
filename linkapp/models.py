import hashlib
import random
import string

from django.db import models

# Create your models here.
from django.urls import reverse


# ShortLink model description
class ShortLink(models.Model):
    full_link = models.TextField()  # Field storing full link to given resource
    shortened_link = models.TextField(null=True, blank=True)  # Field for short link generated by this app
    redirects = models.IntegerField()  # Field to store count of redirects by this link instance

    def generate_shortened_link(self):
        """Creates shortened link
            This method is used to generate short link for full link stored in model
            :return ShortLink(Model)
        """
        self.full_link = self.check_full_link(self.full_link)  # Check full link of model to contain 'http://' beginning
        link = self.hash_generator(self.full_link)  # Generate short link by hash-function
        link = reverse('linker:redirect_view', kwargs={'short_link': link})  # Get project-scoped link by reverse()
        self.shortened_link = link  # Write generated link to model
        self.save(force_update=True)  # Save changes to DB
        return self

    def get_absolute_url(self):
        """Get URL to object
            Default method implementation.
            :returns: URL to instance detail view"""
        return reverse('linker:result', kwargs={'link_id': self.id})

    @staticmethod
    def check_full_link(full_link):
        """Check 'http://' in link beginning
            This method checks http protocol string in full link. This needed because
            Django can redirect to other resources only when link is in URI format
            (with ptotocol signature)
            :param full_link: String to be processed
            :type full_link: str
            :return: String in URI format
        """
        if full_link.startswith('http'):  # if string already have protocol signature
            return full_link  # return without changing
        else:  # if not
            full_link = 'http://' + full_link  # add http protocol signature
            return full_link  # and return result

    @staticmethod
    def hash_generator(shortlink):
        """Get hash from full link
             This method generates unique hash for given link
             :param shortlink: URL to be processed
             :type shortlink: str
             :returns:Unique hash
             :return: str"""
        salt = hashlib.md5(str(shortlink.full_link).encode('utf-8')).hexdigest()
        hash_link = hashlib.md5(str(shortlink.full_link + salt).encode('utf-8')).hexdigest()[:8]
        return hash_link

    def increment_redirects(self):
        """Increment redirects counter"""
        self.redirects += 1
        self.save(force_update=True)